		/* My implementation of cv::getAffineTransform
		// The 6 unknown coefficients for projection matrix
		//
		//
		// | m1	m2	m3 |		|	x	|		|	x^	|
		// |		   |		|		|		|		|
		// | m4	m5	m6 |	*	| 	y	|	= 	|	y^	|
		// |		   |		|		|		|		|
		// | 0	0	1  |		|	1	|		|	1	|
		//
		// ==>
		//
		// m1 * x + m2 * y + m3 = x^   ==>   x * m1 + y * m2 + 1 * m3 = x^
		//
		// ==>
		//
		// | x1 y1 1 |      | m1 |     | x1^ |
		// |         |      |    |     |
		// | x2 y2 1 |  *   | m2 |  =  | x2^ |
		// |         |      |    |     |
		// | x3 y3 1 |      | m3 |     | x3^ |
		//
		// ==> m4 * x + m5 * y + m6 = y^ is the same as above
		//
		// (x1, y1), (x2, y2), (x3, y3) stands for three left points and so do (x1^, y1^), (x2^, y2^) ...
		//
		// pick three roughly matched pairs to calculate th pairNum - 2e m1, m2, m3....
		// matA stands for:
		// | x1 y1 1 |
		// |         |
		// | x2 y2 1 |
		// |         |
		// | x3 y3 1 |
		// matB stands for:
		// | x1^ |      | y1^ |
		// |     |      |     |
		// | x2^ |  OR  | y2^ |
		// |     |      |     |
		// | x3^ |      | y3^ |
		// mat123 and mat456 stands for m1,m2,m3 etc...
		// matA * mat123 = matB OR matA * mat456 = matB
		cv::Mat_<double> matA = (cv::Mat_<double>(3, 3) << p_pair1->pL.x, p_pair1->pL.y, 1,
		p_pair2->pL.x, p_pair2->pL.y, 1, p_pair3->pL.x, p_pair3->pL.y, 1);
		cv::Mat_<double> matB = (cv::Mat_<double>(3, 1) << p_pair1->pR.x, p_pair2->pR.x, p_pair3->pR.x);
		cv::Mat_<double> mat123;

		// if mat123 are solved out, continue to solve mat456, or discard it
		if (cv::solve(matA, matB, mat123, cv::DECOMP_NORMAL | cv::DECOMP_SVD))
		{
		cv::Mat_<double> matB = (cv::Mat_<double>(3, 1) << p_pair1->pR.y, p_pair2->pR.y, p_pair3->pR.y);
		cv::Mat_<double> mat456;

			// if mat456 are solved out, continue calculate the inner point num
			if (cv::solve(matA, matB, mat456, cv::DECOMP_NORMAL | cv::DECOMP_SVD))
			{
			// the coefficients have been solved out
			mat.m1 = mat123.at<double>(0, 0);
			mat.m2 = mat123.at<double>(1, 0);
			mat.m3 = mat123.at<double>(2, 0);
			mat.m4 = mat456.at<double>(0, 0);
			mat.m5 = mat456.at<double>(1, 0);
			mat.m6 = mat456.at<double>(2, 0);

				// calculate the inner point number under current coefficients
				const pointPair* p_pairCur = p_pairs;
				const pointPair* p_pairEnd = p_pairs + pairNum;
				unsigned int innerPointNum = 0;

				for (; p_pairCur != p_pairEnd; ++p_pairCur)
				{
				double expectedRx = mat.m1 * p_pairCur->pL.x + mat.m2 * p_pairCur->pL.y + mat.m3;
				double expectedRy = mat.m4 * p_pairCur->pL.x + mat.m5 * p_pairCur->pL.y + mat.m6;
				double dist = pow((expectedRx - p_pairCur->pR.x), 2) + pow((expectedRy - p_pairCur->pR.y), 2);
				if (dist < distThresh)
				{
				++innerPointNum;
				}
				}

				// only record the coefficients that generates maximum inner point num
				if (innerPointNum > maxInnerPointNum)
				{
				maxInnerPointNum = innerPointNum;
				suitMat = mat;
				}
				}
				}



		for (int f = 0; f < FEAT_NUM; ++f)
		{
			if (featMax < p_pointsCur->mat.feat[f])
				featMax = p_pointsCur->mat.feat[f];

			if (featMin > p_pointsCur->mat.feat[f])
				featMin = p_pointsCur->mat.feat[f];
		}

		DEBUG_PRINT_SIMPLIFIED("Point%4d: (%4d, %4d), Feat: (%lf, %lf, %lf)\n", curPointSeq, p_pointsCur->c.x, p_pointsCur->c.y,
							   p_pointsCur->mat.feat[0], p_pointsCur->mat.feat[1], p_pointsCur->mat.feat[2]);
	}
	featGap = featMax - featMin;

	// normalize the points feat
//    curPointSeq = 1;
//    for (p_pointsCur = p_points; p_pointsCur != p_pointsEnd; ++p_pointsCur, ++curPointSeq)
//    {
//        for (int f = 0; f < FEAT_NUM; ++f)
//        {
//            p_pointsCur->mat.feat[f] = (p_pointsCur->mat.feat[f] - featMin) / featGap;
//        }

//        DEBUG_PRINT_SIMPLIFIED("Point%4d: (%4d, %4d), Feat: (%lf, %lf, %lf)\n", curPointSeq, p_pointsCur->c.x,
//        p_pointsCur->c.y, p_pointsCur->mat.feat[0], p_pointsCur->mat.feat[1], p_pointsCur->mat.feat[2]);
//    }




#ifdef MY_HU_COMP
	double m1 = n20 + n02;
	double m2 = n11;
	double m3 = n30 + n03;
	double m4 = n21 + n12;
#endif

	double m1 = n20*n02 - n11*n11;
	double m2 = n30*n30*n03*n03 - 6 * n30*n21*n12*n03 + 4 * n30*n12*n12*n12 + 4 * n03*n21*n21*n21 - 3 * n21*n21*n12*n12;
	double m3 = n20*n21*n03 - n20*n12*n12 - n11*n30*n03 + n11*n21*n12 + n02*n30*n12 - n02*n21*n21;
	double m4 = -n20*n20*n20*n03*n03 + 6 * n20*n20*n11*n12*n03 - 3 * n20*n20*n02*n12*n12 - 6 * n20*n11*n11*n21*n03 - 6 * n20*n11*n11*n12*n12
			+ 12 * n20*n11*n02*n21*n12 - 3 * n20*n02*n02*n21*n21 + 2 * n11*n11*n11*n30*n03 + 6 * n11*n11*n11*n21*n12 - 6 * n11*n11*n02*n30*n12
		- 6 * n11*n11*n02*n21*n21 + 6 * n11*n02*n02*n30*n21 - n02*n02*n02*n30*n30;


		/*short xCenter = p_point->c.x;
	short yCenter = p_point->c.y;
	unsigned int x, y, x2, y2, xy, x3, y3, x2y, xy2;

	double val, valSigma;
	double sum = 0;
	double sumSigma = 0;
	double sumX = 0;
	double sumXSigma = 0;
	double sumY = 0;
	double sumYSigma = 0;
	double sumX2 = 0;
	double sumX2Sigma = 0;
	double sumY2 = 0;
	double sumY2Sigma = 0;
	double sumXY = 0;
	double sumXYSigma = 0;
	double sumX3 = 0;
	double sumX3Sigma = 0;
	double sumY3 = 0;
	double sumY3Sigma = 0;
	double sumX2Y = 0;
	double sumX2YSigma = 0;
	double sumXY2 = 0;
	double sumXY2Sigma = 0;

	const coord* p_coordsCur = p_coords;
	const coord* p_coordsEnd = p_coords + neighPointNum;
	for (p_coordsCur = p_coords; p_coordsCur != p_coordsEnd; ++p_coordsCur)
	{
		val = p_img[(p_coordsCur->y + yCenter) * w + p_coordsCur->x + xCenter];

		sum += val;
	}
	double valEven = sum / neighPointNum;
	sum = 0;

	for (p_coordsCur = p_coords; p_coordsCur != p_coordsEnd; ++p_coordsCur)
	{
		x = p_coordsCur->x + xCenter;
		y = p_coordsCur->y + yCenter;
		xy = x * y;
		x2 = x * x;
		x3 = x2 * x;
		y2 = y * y;
		y3 = y2 * y;
		x2y = x2 * y;
		xy2 = x * y2;

		val = p_img[(unsigned long long)(y * w + x)];
		val -= valEven;
		valSigma = val * val;

		sum += val;
		sumSigma += valSigma;

		sumX += (val * (double)x);
		sumXSigma += (valSigma * (double)x);

		sumY += (val * (double)y);
		sumYSigma += (valSigma * (double)y);

		sumX2 += (val * (double)x2);
		sumX2Sigma += (valSigma * (double)x2);

		sumY2 += (val * (double)y2);
		sumY2Sigma += (valSigma * (double)y2);

		sumXY += (val * (double)xy);
		sumXYSigma += (valSigma * (double)xy);

		sumX3 += (val * (double)x3);
		sumX3Sigma += (valSigma * (double)x3);

		sumY3 += (val * (double)y3);
		sumY3Sigma += (valSigma * (double)y3);

		sumX2Y += (val * (double)x2y);
		sumX2YSigma += (valSigma * (double)x2y);

		sumXY2 += (val * (double)xy2);
		sumXY2Sigma += (valSigma * (double)xy2);
	}

	double xEven = ((double)sumXSigma) / ((double)sumSigma);
	double yEven = ((double)sumYSigma) / ((double)sumSigma);
	double xEven2 = xEven * xEven;
	double yEven2 = yEven * yEven;
	double xEvenyEven = xEven * yEven;
	double xEven3 = xEven2 * xEven;
	double yEven3 = yEven2 * yEven;
	double xEven2yEven = xEven2 * yEven;
	double xEvenyEven2 = xEven * yEven2;
	double xEven4 = xEven2 * xEven2;
	double yEven4 = yEven2 * yEven2;

	double u00 = sum;
	double u00Sigma = sumSigma;
	double u20 = sumX2 - 2 * xEven * sumX + xEven * xEven * u00;
	double u20Sigma = sumX2Sigma - 2 * xEven * sumX2Sigma + xEven2 * u00Sigma;
	double u02 = sumY2 - 2 * yEven * sumY + yEven * yEven * u00;
	double u02Sigma = sumY2Sigma - 2 * yEven * sumY2Sigma + yEven2 * u00Sigma;
	double u11 = sumXY - xEven * sumY - yEven * sumX + xEven * yEven * u00;
	double u11Sigma = sumXYSigma - xEven * sumYSigma - yEven * sumXSigma + xEvenyEven * u00Sigma;
	double u30 = sumX3 - 3 * sumX2 * xEven + 3 * sumX * xEven2 - xEven3 * u00;
	double u30Sigma = sumX3Sigma - 3 * xEven * sumX2Sigma + 3 * xEven2 * sumXSigma - xEven3 * u00Sigma;
	double u03 = sumY3 - 3 * sumY2 * yEven + 3 * sumY * yEven2 - yEven3 * u00;
	double u03Sigma = sumY3Sigma - 3 * yEven * sumY2Sigma + 3 * yEven2 * sumYSigma - yEven3 * u00Sigma;
	double u21 = sumX2Y - 2 * sumXY * xEven + sumY * xEven2 - sumX2 * yEven + 2 * sumX * xEvenyEven - xEven2yEven * u00;
	double u21Sigma = sumX2YSigma - 2 * xEven * sumXYSigma + xEven2 * sumYSigma - yEven * sumX2Sigma + 2 * xEvenyEven * sumXSigma - xEven2yEven * u00Sigma;
	double u12 = sumXY2 - 2 * sumXY * yEven + sumX * yEven2 - sumY2 * xEven + 2 * sumY * xEvenyEven - xEvenyEven2 * u00;
	double u12Sigma = sumXYSigma - 2 * yEven * sumXYSigma + yEven2 * sumXSigma - xEven * sumY2Sigma + 2 * xEvenyEven * sumYSigma - xEvenyEven2 * u00Sigma;

	double m1 = (u20*u02 - u11*u11) / pow(u00Sigma, 1);
	double m2 = (u30*u30*u03*u03 - 6 * u30*u21*u12*u03 + 4 * u30*u12*u12*u12 + 4 * u03*u21*u21*u21 - 3 * u21*u21*u12*u12) / pow(u00Sigma, 2);
	double m3 = (u20*u21*u03 - u20*u12*u12 - u11*u30*u03 + u11*u21*u12 + u02*u30*u12 - u02*u21*u21) / pow(u00Sigma, 1.5);
	double m4 = (-u20*u20*u20*u03*u03 + 6 * u20*u20*u11*u12*u03 - 3 * u20*u20*u02*u12*u12 - 6 * u20*u11*u11*u21*u03 -
		6 * u20*u11*u11*u12*u12 + 12 * u20*u11*u02*u21*u12 - 3 * u20*u02*u02*u21*u21 + 2 * u11*u11*u11*u30*u03 + 6 * u11*u11*u11*u21*u12 - 6 * u11*u11*u02*u30*u12 - 6 * u11*u11*u02*u21*u21 + 6 * u11*u02*u02*u30*u21 - u02*u02*u02*u30*u30) / pow(u00Sigma, 2.5);

	double m1Sigma = (u20Sigma*u02Sigma - u11Sigma*u11Sigma) / pow(u00Sigma, 2);
	double m2Sigma = (u30Sigma*u30Sigma*u03Sigma*u03Sigma - 6 * u30Sigma*u21Sigma*u12Sigma*u03Sigma + 4 * u30Sigma*u12Sigma*u12Sigma*u12Sigma + 4 * u03Sigma*u21Sigma*u21Sigma*u21Sigma - 3 * u21Sigma*u21Sigma*u12Sigma*u12Sigma) / pow(u00Sigma, 4);
	double m3Sigma = (u20Sigma*u21Sigma*u03Sigma - u20Sigma*u12Sigma*u12Sigma - u11Sigma*u30Sigma*u03Sigma + u11Sigma*u21Sigma*u12Sigma + u02Sigma*u30Sigma*u12Sigma - u02Sigma*u21Sigma*u21Sigma) / pow(u00Sigma, 3);
	double m4Sigma = (-u20Sigma*u20Sigma*u20Sigma*u03Sigma*u03Sigma + 6 * u20Sigma*u20Sigma*u11Sigma*u12Sigma*u03Sigma - 3 * u20Sigma*u20Sigma*u02Sigma*u12Sigma*u12Sigma - 6 * u20Sigma*u11Sigma*u11Sigma*u21Sigma*u03Sigma -
		6 * u20Sigma*u11Sigma*u11Sigma*u12Sigma*u12Sigma + 12 * u20Sigma*u11Sigma*u02Sigma*u21Sigma*u12Sigma - 3 * u20Sigma*u02Sigma*u02Sigma*u21Sigma*u21Sigma + 2 * u11Sigma*u11Sigma*u11Sigma*u30Sigma*u03Sigma + 6 * u11Sigma*u11Sigma*u11Sigma*u21Sigma*u12Sigma - 6 * u11Sigma*u11Sigma*u02Sigma*u30Sigma*u12Sigma - 6 * u11Sigma*u11Sigma*u02Sigma*u21Sigma*u21Sigma + 6 * u11Sigma*u02Sigma*u02Sigma*u30Sigma*u21Sigma - u02Sigma*u02Sigma*u02Sigma*u30Sigma*u30Sigma) / pow(u00Sigma, 5);

	p_point->mat.feat[0] = m1;
	p_point->mat.feat[1] = m2;
	p_point->mat.feat[2] = m3;
	p_point->mat.feat[3] = m4;
	p_point->mat.feat[4] = m1Sigma;
	p_point->mat.feat[5] = m2Sigma;
	p_point->mat.feat[6] = m3Sigma;
	p_point->mat.feat[7] = m4Sigma;*/



	
#ifdef _PURE_SINGLE_TRANSFORM_
	// angle2
	if (angle2 != 0)
	{
#ifdef _CALC_IMAGE_MATRIX_
		double angleCalc = (acos(suitMat.m1) * 180.0) / CV_PI;
		double defi = abs(angleCalc - angle2);
		double rate = (defi * 100.0) / angle2;
		cout << endl << angle2 << "\t" << angleCalc << "\t" << defi << "\t" << rate << endl;
#endif
#ifdef _CALC_CAMERA_MATRIX_
		double angleCalc = (acos(1.0 / suitMat.m1) * 180.0) / CV_PI;
		double defi = abs(angleCalc - angle2);
		double rate = (defi * 100.0) / angle2;
		cout << endl << angle2 << "\t" << angleCalc << "\t" << defi << "\t" << rate << endl;
#endif
	}

	// angle1
	if (angle1 != 0)
	{
#ifdef _CALC_IMAGE_MATRIX_
		double a1 = (acos(suitMat.m1) * 180.0) / CV_PI;
		double a2 = (asin(suitMat.m2) * 180.0) / CV_PI;
		double a3 = (-asin(suitMat.m4) * 180.0) / CV_PI;
		double a4 = (acos(suitMat.m5) * 180.0) / CV_PI;
		double angleCalc2 = (a1 + a2 + a3 + a4) / 4;
		double defi2 = abs(angleCalc2 - angle2);
		double rate2 = (defi2 * 100.0) / angle2;
		cout << endl << angle2 << "\t" << angleCalc2 << "\t" << defi2 << "\t" << rate2 << endl;
#endif

#ifdef _CALC_CAMERA_MATRIX_
		double a1 = (acos(suitMat.m1) * 180.0) / CV_PI;
		double a2 = (-asin(suitMat.m2) * 180.0) / CV_PI;
		double a3 = (asin(suitMat.m4) * 180.0) / CV_PI;
		double a4 = (acos(suitMat.m5) * 180.0) / CV_PI;
		double angleCalc2 = (a1 + a2 + a3 + a4) / 4;
		double defi2 = abs(angleCalc2 - angle2);
		double rate2 = (defi2 * 100.0) / angle2;
		cout << endl << angle2 << "\t" << angleCalc2 << "\t" << defi2 << "\t" << rate2 << endl;
#endif
	}
#endif


#ifdef _REAL_DATA_
	double angle1, angle2, angle3, dx, dy, scale, a1, a2, a3, a4;
	cv::Mat real(2, 2, CV_64FC1);
	real.at<double>(0, 0) = 0.7882767153207999;
	real.at<double>(0, 1) = 0.010905680735846527;
	real.at<double>(1, 0) = -0.02537010994777608;
	real.at<double>(1, 1) = 0.9232684706505401;
	cv::SVD resultReal(real, cv::SVD::FULL_UV);
	cv::Mat Ureal = resultReal.u;
	cv::Mat VTreal = resultReal.vt;
	cv::Mat Sreal = resultReal.w;
	cout << "Ureal" << endl << Ureal << endl << endl;
	cout << "VTreal" << endl << VTreal << endl << endl;
	cout << "Sreal" << endl << Sreal << endl << endl;

	// angle1
	a1 = (asin(Ureal.at<double>(0, 0)) * 180.0) / CV_PI;
	a2 = (acos(-Ureal.at<double>(0, 1)) * 180.0) / CV_PI;
	a3 = (acos(Ureal.at<double>(1, 0)) * 180.0) / CV_PI;
	a4 = (asin(Ureal.at<double>(1, 1)) * 180.0) / CV_PI;
	angle1 = (a1 + a2 + a3 + a4) / 4;

	// angle2
	angle2 = (acos(MIN(Sreal.at<double>(0, 0), Sreal.at<double>(1, 0))) * 180.0) / CV_PI;

	// angle3
	if (VTreal.at<double>(0, 0) < 0)
	{
		a1 = (asin(-VTreal.at<double>(0, 0)) * 180.0) / CV_PI;
		a2 = (acos(VTreal.at<double>(0, 1)) * 180.0) / CV_PI;
		a3 = (acos(-VTreal.at<double>(1, 0)) * 180.0) / CV_PI;
		a4 = (asin(-VTreal.at<double>(1, 1)) * 180.0) / CV_PI;
	}
	else
	{
		a1 = (asin(VTreal.at<double>(0, 0)) * 180.0) / CV_PI;
		a2 = (acos(-VTreal.at<double>(0, 1)) * 180.0) / CV_PI;
		a3 = (acos(VTreal.at<double>(1, 0)) * 180.0) / CV_PI;
		a4 = (asin(VTreal.at<double>(1, 1)) * 180.0) / CV_PI;
	}
	angle3 = (a1 + a2 + a3 + a4) / 4;
#endif